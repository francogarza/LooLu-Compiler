LooLu bs;

VARS:
  var int : myArr[10], myMat[10][10];
  var bool : myBool;
FUNCS:

func void fillArr(size : int) {
    VARS:
    var int : i;
    var int : n;
    START:
    i = 0;

    while (i < size) {
        read(n);
        myArr[i] = n;
        i = i + 1;
    }
}

func bool binarySearch(left : int, right : int, target : int) {
    VARS:
    var int : mid;

    START:
        while (left <= right) {
            mid = (left + right) / 2;
            if (myArr[mid] == target) {
                return(true);
            }
            if (myArr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return(false);
}

func bool binarySearchRec(left : int, right : int, target : int) {
    VARS:
        var int : mid;
    START:
        if (left > right) {
            return(false);
        }

        mid = (left + right) / 2;

        if (myArr[mid] == target) {
            return(true);
        }
        if (myArr[mid] < target) {
            return(binarySearchRec(mid + 1, right, target));
        } else {
            return(binarySearchRec(left, right - 1, target));
        }
}
  
CLASSES:

Loo() {

    fillArr(10);
    myBool = binarySearch(0, 9, 7);
    print(myBool);
    myBool = binarySearchRec(0, 9, 7);
    print(myBool);

} Lu;
